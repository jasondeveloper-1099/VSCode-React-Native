// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

import {FileSystem} from "./utils/node/fileSystem";
import * as path from "path";
import * as vscode from "vscode";
import {ReactNativeCommandExecutor} from "./utils/reactNativeCommandExecutor";
import {ReactNativeProjectHelper} from "./utils/reactNativeProjectHelper";

export function activate(context: vscode.ExtensionContext): void {
    let reactNativeProjectHelper = new ReactNativeProjectHelper(vscode.workspace.rootPath);
    reactNativeProjectHelper.isReactNativeProject().then(isRNProject => {
        if (isRNProject) {
            setupReactNativeDebugger();
            let reactDir = new ReactDirManager();
            reactDir.init();
            context.subscriptions.push(reactDir);
        }
    });

    let reactNativeCommandExecutor = new ReactNativeCommandExecutor(vscode.workspace.rootPath);

    // Register React Native commands
    context.subscriptions.push(vscode.commands.registerCommand("reactNative.runAndroid",
        () => reactNativeCommandExecutor.executeCommandInContext(() => reactNativeCommandExecutor.runAndroid())));
    context.subscriptions.push(vscode.commands.registerCommand("reactNative.runIos",
        () => reactNativeCommandExecutor.executeCommandInContext(() => reactNativeCommandExecutor.runIos())));
    context.subscriptions.push(vscode.commands.registerCommand("reactNative.startPackager",
        () => reactNativeCommandExecutor.executeCommandInContext(() => reactNativeCommandExecutor.startPackager())));
    context.subscriptions.push(vscode.commands.registerCommand("reactNative.stopPackager",
        () => reactNativeCommandExecutor.executeCommandInContext(() => reactNativeCommandExecutor.stopPackager())));
}

/**
 * Sets up the debugger for the React Native project by dropping
 * the debugger stub into the workspace
 */
function setupReactNativeDebugger(): void {
    let launcherPath = require.resolve("./debugger/launcher");
    const extensionVersionNumber = require("../package.json").version;

    let debuggerEntryCode =
        `// This file is automatically generated. version:${extensionVersionNumber}
try {
    var path = require("path");
    var Launcher = require(${JSON.stringify(launcherPath)}).Launcher;
    new Launcher(path.resolve(__dirname, "..")).launch();
} catch (e) {
    throw new Error("Unable to launch application. Try deleting .vscode/launchReactNative.js and restarting vscode.");
}`;
    let vscodeFolder = path.join(vscode.workspace.rootPath, ".vscode");
    let debugStub = path.join(vscodeFolder, "launchReactNative.js");

    let fsUtil = new FileSystem();

    fsUtil.ensureDirectory(vscodeFolder)
        .then(() => fsUtil.pathExists(debugStub))
        .then((fileExists) => {
            if (fileExists) {
                return fsUtil.removePathRecursivelyAsync(debugStub);
            }
        })
        .then(() => fsUtil.ensureFileWithContents(debugStub, debuggerEntryCode))
        .catch((err: Error) => {
            vscode.window.showErrorMessage(err.message);
        });
}

/**
 * Manages the lifecycle of the .vscode/.react folder, which hosts the temporary source/map files we need for debugging.
 * We use synchronous operations here because we want to return after the init/cleanup has been done.
 */
class ReactDirManager implements vscode.Disposable {
    public static ReactDirPath = path.join(vscode.workspace.rootPath, ".vscode", ".react");

    public init(): void {
        let fs = new FileSystem();
        /* if the folder exists, remove it, then recreate it */
        fs.removePathRecursivelyAsync(ReactDirManager.ReactDirPath)
            .done(() => fs.mkDir(ReactDirManager.ReactDirPath));
    }

    public dispose(): void {
        new FileSystem().removePathRecursivelySync(ReactDirManager.ReactDirPath);
    }
}