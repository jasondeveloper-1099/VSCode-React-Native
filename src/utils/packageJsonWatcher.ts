// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

import * as fs from "fs";
import * as path from "path";
import * as Q from "q";
import * as vscode from "vscode";

export class PackageJsonWatcher {
    private filesystemWatcher: vscode.FileSystemWatcher;
    constructor() {
        this.filesystemWatcher = vscode.workspace.createFileSystemWatcher("package.json");
    }

    public startWatching(): void {
        this.filesystemWatcher.onDidChange((changeEvent: vscode.Uri) => this.configureReactNativeWorkspace());
        this.filesystemWatcher.onDidCreate((changeEvent: vscode.Uri) => this.configureReactNativeWorkspace());
        this.configureReactNativeWorkspace();
    }

    private dropDebuggerStub(): void {
        let debuggerEntryPath = require.resolve("../debugger/reactNative/reactNative");
        // TODO: Update this stub to point to correct file/class once it is in
        const extensionVersionNumber = require("../../package.json").version;
        let debuggerEntryCode =
`// This file is automatically generated. version:${extensionVersionNumber}
try {
    var path = require("path");
    var RN = require(${JSON.stringify(debuggerEntryPath)}).ReactNative;
    new RN.Launcher(path.resolve(__dirname, "..")).launch();
} catch (e) {
    throw new Error("Unable to launch application. Try deleting .vscode/launchReactNative.js and restarting vscode.");
}`;
        let vscodeFolder = path.join(vscode.workspace.rootPath, ".vscode");
        let debugStub = path.join(vscodeFolder, "launchReactNative.js");

        Q.nfcall(fs.stat, vscodeFolder).then((stat: fs.Stats): any => {
            if (stat && !stat.isDirectory()) {
                // .vscode exists but is not a folder: bail out
                throw new Error("Warning: Expected .vscode to be a folder. Debugging requires manual intervention.");
            }
        }, (err: Error & {code?: string}) => {
            if (err && err.code === "ENOENT") {
                // No .vscode folder: create one
                return Q.nfcall(fs.mkdir, vscodeFolder);
            } else {
                throw err;
            }
        }).then(() => {
            // At this point, .vscode folder exists and is a folder
            return Q.nfcall(fs.stat, debugStub).then((stat: fs.Stats): any => {
                if (!stat.isFile()) {
                    throw Error("Error: Expected .vscode/launchReactNative.js to be a file");
                }
                // File exists: lets leave it there and assume it was created by us
            }, (err: Error & {code?: string}) => {
                if (err && err.code === "ENOENT") {
                    return Q.nfcall(fs.writeFile, debugStub, debuggerEntryCode);
                } else {
                    throw err;
                }
            });
        }).catch((err: Error) => {
            vscode.window.showErrorMessage(err.message);
        });
    }

    private configureReactNativeWorkspace(): void {
        try {
            let packageJsonPath = path.join(vscode.workspace.rootPath, "package.json");
            let packageJsonContents = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"));
            if (packageJsonContents && packageJsonContents.dependencies
                && "react-native" in packageJsonContents.dependencies) {
                // Looks like a react native project: Set it up for debugging
                this.dropDebuggerStub();
            }
        } catch (e) {
            // Project was malformed or not a react native project: do nothing.
        }
    }
}