// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

import * as fs from "fs";
import * as path from "path";
import * as Q from "q";
import * as vscode from "vscode";

import {FileSystemUtil} from "./fileSystemUtil";

export class PackageJsonWatcher {
    private filesystemWatcher: vscode.FileSystemWatcher;
    constructor() {
        this.filesystemWatcher = vscode.workspace.createFileSystemWatcher("package.json");
    }

    public startWatching(): void {
        this.filesystemWatcher.onDidChange((changeEvent: vscode.Uri) => this.configureReactNativeWorkspace());
        this.filesystemWatcher.onDidCreate((changeEvent: vscode.Uri) => this.configureReactNativeWorkspace());
        this.configureReactNativeWorkspace();
    }

    private dropDebuggerStub(): void {
        let debuggerEntryPath = require.resolve("../debugger/debuggerEntry");
        // TODO: Update this stub to point to correct file/class once it is in
        const extensionVersionNumber = require("../../package.json").version;
        let debuggerEntryCode =
`// This file is automatically generated. version:${extensionVersionNumber}
try {
    var path = require("path");
    var RN = require(${JSON.stringify(debuggerEntryPath)}).ReactNative;
    new RN.Launcher(path.resolve(__dirname, "..")).launch();
} catch (e) {
    throw new Error("Unable to launch application. Try deleting .vscode/launchReactNative.js and restarting vscode.");
}`;
        let vscodeFolder = path.join(vscode.workspace.rootPath, ".vscode");
        let debugStub = path.join(vscodeFolder, "launchReactNative.js");

        let fsUtil = new FileSystemUtil();

        fsUtil.ensureDirectory(vscodeFolder).then(() => {
            fsUtil.ensureFileWithContents(debugStub, debuggerEntryCode);
        }).catch((err: Error) => {
            vscode.window.showErrorMessage(err.message);
        });
    }

    private configureReactNativeWorkspace(): void {
        let packageJsonPath = path.join(vscode.workspace.rootPath, "package.json");
        Q.nfcall(fs.readFile, packageJsonPath, "utf-8").then((contents: string) => {
            let packageJsonContents = JSON.parse(contents);
            if (packageJsonContents && packageJsonContents.dependencies
                && "react-native" in packageJsonContents.dependencies) {
                // Looks like a react native project: Set it up for debugging
                this.dropDebuggerStub();
            }
        }).catch(() => {});
        // If the readFile fails, or the JSON.parse fails, then we ignore the exception
        // and assume this is not a react-native project.
    }
}