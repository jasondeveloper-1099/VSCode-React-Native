// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

import * as path from "path";
import * as vscode from "vscode";

import {TsConfigHelper} from "./tsconfigHelper";
import {TsdHelper} from "./tsdHelper";
import {FileSystem} from "./node/fileSystem";
import {Package} from "./node/package";

export class PackageJsonWatcher {
    private fileSystemWatcher: vscode.FileSystemWatcher;
    constructor() {
        this.fileSystemWatcher = vscode.workspace.createFileSystemWatcher("package.json");
    }

    public startWatching(): void {
        this.fileSystemWatcher.onDidChange((changeEvent: vscode.Uri) => this.configureReactNativeWorkspace());
        this.fileSystemWatcher.onDidCreate((changeEvent: vscode.Uri) => this.configureReactNativeWorkspace());
        this.configureReactNativeWorkspace();
    }

    private dropDebuggerStub(): void {
        let launcherPath = require.resolve("../debugger/launcher");
        const extensionVersionNumber = require("../../package.json").version;
        let debuggerEntryCode =
            `// This file is automatically generated. version:${extensionVersionNumber}
try {
    var path = require("path");
    var Launcher = require(${JSON.stringify(launcherPath)}).Launcher;
    new Launcher(path.resolve(__dirname, "..")).launch();
} catch (e) {
    throw new Error("Unable to launch application. Try deleting .vscode/launchReactNative.js and restarting vscode.");
}`;
        let vscodeFolder = path.join(vscode.workspace.rootPath, ".vscode");
        let debugStub = path.join(vscodeFolder, "launchReactNative.js");

        let fsUtil = new FileSystem();

        fsUtil.ensureDirectory(vscodeFolder).then(() => {
            fsUtil.ensureFileWithContents(debugStub, debuggerEntryCode);
        }).catch((err: Error) => {
            vscode.window.showErrorMessage(err.message);
        });
    }

    private configureReactNativeWorkspace(): void {
        let currentPackage = new Package(vscode.workspace.rootPath);
        currentPackage.dependencies().then(dependencies => {
            if (dependencies && dependencies["react-native"]) {
                // Looks like a react native project: Set it up for debugging
                this.dropDebuggerStub();

                // Enable JavaScript intellisense through Salsa language service
                TsConfigHelper.compileJavaScript(true).done();

                // Add typings for React and React Native
                var reactTypeDefsPath = path.resolve(__dirname, "..", "..", "reactTypings.json");
                var typeDefsToInstall:string[] = require(reactTypeDefsPath);
                TsdHelper.installTypings(TsdHelper.getOrCreateTypingsTargetPath(vscode.workspace.rootPath),typeDefsToInstall).done();
            }
        }).catch(() => { });
        // If the readFile fails, or the JSON.parse fails, then we ignore the exception
        // and assume this is not a react-native project.
    }
}