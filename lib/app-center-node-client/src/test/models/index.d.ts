/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the DeviceConfigurationImage class.
 * @constructor
 * @member {string} [full]
 * @member {string} [thumb]
 */
export interface DeviceConfigurationImage {
  full?: string;
  thumb?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceDimensions class.
 * @constructor
 * Physical device dimensions
 *
 * @member {object} [depth]
 * @member {object} [height]
 * @member {object} [width]
 */
export interface DeviceDimensions {
  depth?: any;
  height?: any;
  width?: any;
}

/**
 * @class
 * Initializes a new instance of the DeviceResolution class.
 * @constructor
 * Device screen resolution
 *
 * @member {string} [height]
 * @member {string} [width]
 * @member {string} [ppi]
 */
export interface DeviceResolution {
  height?: string;
  width?: string;
  ppi?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceScreenSize class.
 * @constructor
 * Physical device screen dimensions
 *
 * @member {string} [cm]
 * @member {string} [inProperty]
 */
export interface DeviceScreenSize {
  cm?: string;
  inProperty?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceCpu class.
 * @constructor
 * CPU data for device
 *
 * @member {string} [frequency]
 * @member {string} [core]
 */
export interface DeviceCpu {
  frequency?: string;
  core?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceMemory class.
 * @constructor
 * Memory data for device
 *
 * @member {string} [formattedSize]
 */
export interface DeviceMemory {
  formattedSize?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceFrameDefinition class.
 * @constructor
 * @member {number} [width]
 * @member {number} [height]
 * @member {string} [frameUrl]
 * @member {array} [screen]
 */
export interface DeviceFrameDefinition {
  width?: number;
  height?: number;
  frameUrl?: string;
  screen?: number[];
}

/**
 * @class
 * Initializes a new instance of the DeviceFrame class.
 * @constructor
 * @member {object} [grid]
 * @member {number} [grid.width]
 * @member {number} [grid.height]
 * @member {string} [grid.frameUrl]
 * @member {array} [grid.screen]
 * @member {object} [full]
 * @member {number} [full.width]
 * @member {number} [full.height]
 * @member {string} [full.frameUrl]
 * @member {array} [full.screen]
 */
export interface DeviceFrame {
  grid?: DeviceFrameDefinition;
  full?: DeviceFrameDefinition;
}

/**
 * @class
 * Initializes a new instance of the DeviceModel class.
 * @constructor
 * @member {string} [name]
 * @member {string} [manufacturer]
 * @member {string} [model]
 * @member {string} [platform]
 * @member {object} [dimensions]
 * @member {object} [dimensions.depth]
 * @member {object} [dimensions.height]
 * @member {object} [dimensions.width]
 * @member {object} [resolution]
 * @member {string} [resolution.height]
 * @member {string} [resolution.width]
 * @member {string} [resolution.ppi]
 * @member {string} [releaseDate]
 * @member {string} [formFactor]
 * @member {object} [screenSize]
 * @member {string} [screenSize.cm]
 * @member {string} [screenSize.inProperty]
 * @member {object} [cpu]
 * @member {string} [cpu.frequency]
 * @member {string} [cpu.core]
 * @member {object} [memory]
 * @member {string} [memory.formattedSize]
 * @member {number} [screenRotation]
 * @member {object} [deviceFrame]
 * @member {object} [deviceFrame.grid]
 * @member {number} [deviceFrame.grid.width]
 * @member {number} [deviceFrame.grid.height]
 * @member {string} [deviceFrame.grid.frameUrl]
 * @member {array} [deviceFrame.grid.screen]
 * @member {object} [deviceFrame.full]
 * @member {number} [deviceFrame.full.width]
 * @member {number} [deviceFrame.full.height]
 * @member {string} [deviceFrame.full.frameUrl]
 * @member {array} [deviceFrame.full.screen]
 * @member {number} [availabilityCount]
 */
export interface DeviceModel {
  name?: string;
  manufacturer?: string;
  model?: string;
  platform?: string;
  dimensions?: DeviceDimensions;
  resolution?: DeviceResolution;
  releaseDate?: string;
  formFactor?: string;
  screenSize?: DeviceScreenSize;
  cpu?: DeviceCpu;
  memory?: DeviceMemory;
  screenRotation?: number;
  deviceFrame?: DeviceFrame;
  availabilityCount?: number;
}

/**
 * @class
 * Initializes a new instance of the DeviceConfiguration class.
 * @constructor
 * @member {string} [name] The name of the device model and OS version
 * @member {uuid} [id] The unique id of the device configuration
 * @member {number} [tier] The tier
 * @member {object} [image]
 * @member {string} [image.full]
 * @member {string} [image.thumb]
 * @member {object} [model]
 * @member {string} [model.name]
 * @member {string} [model.manufacturer]
 * @member {string} [model.model]
 * @member {string} [model.platform]
 * @member {object} [model.dimensions]
 * @member {object} [model.dimensions.depth]
 * @member {object} [model.dimensions.height]
 * @member {object} [model.dimensions.width]
 * @member {object} [model.resolution]
 * @member {string} [model.resolution.height]
 * @member {string} [model.resolution.width]
 * @member {string} [model.resolution.ppi]
 * @member {string} [model.releaseDate]
 * @member {string} [model.formFactor]
 * @member {object} [model.screenSize]
 * @member {string} [model.screenSize.cm]
 * @member {string} [model.screenSize.inProperty]
 * @member {object} [model.cpu]
 * @member {string} [model.cpu.frequency]
 * @member {string} [model.cpu.core]
 * @member {object} [model.memory]
 * @member {string} [model.memory.formattedSize]
 * @member {number} [model.screenRotation]
 * @member {object} [model.deviceFrame]
 * @member {object} [model.deviceFrame.grid]
 * @member {number} [model.deviceFrame.grid.width]
 * @member {number} [model.deviceFrame.grid.height]
 * @member {string} [model.deviceFrame.grid.frameUrl]
 * @member {array} [model.deviceFrame.grid.screen]
 * @member {object} [model.deviceFrame.full]
 * @member {number} [model.deviceFrame.full.width]
 * @member {number} [model.deviceFrame.full.height]
 * @member {string} [model.deviceFrame.full.frameUrl]
 * @member {array} [model.deviceFrame.full.screen]
 * @member {number} [model.availabilityCount]
 * @member {string} [os]
 * @member {string} [osName]
 * @member {number} [marketShare]
 */
export interface DeviceConfiguration {
  name?: string;
  id?: string;
  tier?: number;
  image?: DeviceConfigurationImage;
  model?: DeviceModel;
  os?: string;
  osName?: string;
  marketShare?: number;
}

/**
 * @class
 * Initializes a new instance of the DeviceList class.
 * @constructor
 * @summary Device List
 *
 * A list of device IDs
 *
 * @member {array} devices
 */
export interface DeviceList {
  devices: string[];
}

/**
 * @class
 * Initializes a new instance of the DeviceSelection class.
 * @constructor
 * @summary Device Selection
 *
 * Short ID for a list of device IDs
 *
 * @member {string} shortId Identifier of the device selection
 */
export interface DeviceSelection {
  shortId: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceSetOwner class.
 * @constructor
 * @summary Device Set Owner
 *
 * The owner of a device set
 *
 * @member {string} type Type of account
 * @member {string} id Account ID
 * @member {string} [displayName] Display name of the account
 * @member {string} name Name of the account
 */
export interface DeviceSetOwner {
  type: string;
  id: string;
  displayName?: string;
  name: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceSetConfigurationImage class.
 * @constructor
 * @member {string} [thumb]
 */
export interface DeviceSetConfigurationImage {
  thumb?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceSetModel class.
 * @constructor
 * @member {string} [name]
 * @member {string} [manufacturer]
 * @member {string} [releaseDate]
 * @member {string} [formFactor]
 */
export interface DeviceSetModel {
  name?: string;
  manufacturer?: string;
  releaseDate?: string;
  formFactor?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceSetConfiguration class.
 * @constructor
 * @member {uuid} [id] The unique id of the device configuration
 * @member {object} [image]
 * @member {string} [image.thumb]
 * @member {object} [model]
 * @member {string} [model.name]
 * @member {string} [model.manufacturer]
 * @member {string} [model.releaseDate]
 * @member {string} [model.formFactor]
 * @member {string} [os]
 * @member {string} [osName]
 */
export interface DeviceSetConfiguration {
  id?: string;
  image?: DeviceSetConfigurationImage;
  model?: DeviceSetModel;
  os?: string;
  osName?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceSet class.
 * @constructor
 * @summary Device Set
 *
 * The name and devices of the device set
 *
 * @member {string} id Identifier of the device set
 * @member {number} [manufacturerCount] The number of manufacturers in the
 * device set's device selection
 * @member {string} name Name of the device set
 * @member {string} [slug] Slug of the device set
 * @member {object} owner
 * @member {string} [owner.type] Type of account
 * @member {string} [owner.id] Account ID
 * @member {string} [owner.displayName] Display name of the account
 * @member {string} [owner.name] Name of the account
 * @member {number} [osVersionCount] The number of os versions in the device
 * set's device selection
 * @member {array} deviceConfigurations
 */
export interface DeviceSet {
  id: string;
  manufacturerCount?: number;
  name: string;
  slug?: string;
  owner: DeviceSetOwner;
  osVersionCount?: number;
  deviceConfigurations: DeviceSetConfiguration[];
}

/**
 * @class
 * Initializes a new instance of the DeviceSetUpdate class.
 * @constructor
 * @summary Device Set update information
 *
 * The name of the device set and the list of device IDs
 *
 * @member {array} devices List of device IDs
 * @member {string} name The name of the device set
 */
export interface DeviceSetUpdate {
  devices: string[];
  name: string;
}

/**
 * @class
 * Initializes a new instance of the Tier class.
 * @constructor
 * @summary Subscription Tier
 *
 * @member {string} [name] The name of the tier
 */
export interface Tier {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the Subscription class.
 * @constructor
 * @summary Subscription
 *
 * Subscription information
 *
 * @member {string} [startsAt] The date the subscription began
 * @member {string} [endsAt] The date the subscription will end or ended
 * @member {number} [daysLeft] The number of days left in the subscription
 * @member {object} [tier]
 * @member {string} [tier.name] The name of the tier
 * @member {boolean} [active] Is the subscription currently active?
 * @member {uuid} [id] Id of the subscription
 */
export interface Subscription {
  startsAt?: string;
  endsAt?: string;
  daysLeft?: number;
  tier?: Tier;
  active?: boolean;
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the TestCloudFileHash class.
 * @constructor
 * @summary Test Cloud File Hash
 *
 * Hash, type, path and byte range of a file that is required in test run
 *
 * @member {string} fileType Type of the file. Possible values include:
 * 'dsym-file', 'app-file', 'test-file'
 * @member {string} checksum SHA256 hash of the file
 * @member {string} relativePath Relative path of the file
 */
export interface TestCloudFileHash {
  fileType: string;
  checksum: string;
  relativePath: string;
}

/**
 * @class
 * Initializes a new instance of the TestCloudFileHashDeprecated class.
 * @constructor
 * @summary Test Cloud File Hash
 *
 * Hash, type, path and byte range of a file that is required in test run
 *
 * @member {string} fileType Type of the file. Possible values include:
 * 'dsym-file', 'app-file', 'test-file'
 * @member {string} checksum SHA256 hash of the file
 * @member {string} relativePath Relative path of the file
 * @member {string} [byteRange] Range of bytes required to verify ownership of
 * the file
 */
export interface TestCloudFileHashDeprecated {
  fileType: string;
  checksum: string;
  relativePath: string;
  byteRange?: string;
}

/**
 * @class
 * Initializes a new instance of the TestCloudHashUploadStatus class.
 * @constructor
 * @summary Test Cloud Hash Upload Status
 *
 * Result of uploading a single file hash
 *
 * @member {number} statusCode HTTP status code that represent result of upload
 * @member {string} [location] URI that should be used to make POST request if
 * file with given hash doesn't exist. This is set when status_code is equal to
 * 412
 */
export interface TestCloudHashUploadStatus {
  statusCode: number;
  location?: string;
}

/**
 * @class
 * Initializes a new instance of the TestCloudFileHashResponse class.
 * @constructor
 * @summary Test Cloud File Hash Response
 *
 * Response message for single uploaded file hash
 *
 * @member {string} fileType Type of the file. Possible values include:
 * 'dsym-file', 'app-file', 'test-file'
 * @member {string} checksum SHA256 hash of the file
 * @member {string} [relativePath] Relative path of the file
 * @member {object} uploadStatus Status of the upload
 * @member {number} [uploadStatus.statusCode] HTTP status code that represent
 * result of upload
 * @member {string} [uploadStatus.location] URI that should be used to make
 * POST request if file with given hash doesn't exist. This is set when
 * status_code is equal to 412
 */
export interface TestCloudFileHashResponse {
  fileType: string;
  checksum: string;
  relativePath?: string;
  uploadStatus: TestCloudHashUploadStatus;
}

/**
 * @class
 * Initializes a new instance of the TestCloudStartTestRunOptions class.
 * @constructor
 * @summary Test Cloud Start Test Run Options
 *
 * Options required to start the test run
 *
 * @member {string} testFramework Test framework used by tests.
 * @member {string} deviceSelection Device selection string.
 * @member {string} [language] Language that should be used to run tests.
 * @member {string} [locale] Locale that should be used to run tests.
 * @member {string} [testSeries] Name of the test series.
 * @member {object} [testParameters] A JSON dictionary with additional test
 * parameters
 */
export interface TestCloudStartTestRunOptions {
  testFramework: string;
  deviceSelection: string;
  language?: string;
  locale?: string;
  testSeries?: string;
  testParameters?: any;
}

/**
 * @class
 * Initializes a new instance of the TestCloudStartTestRunResult class.
 * @constructor
 * @summary Test Cloud Test Run Start Result
 *
 * Result of starting a test run
 *
 * @member {array} [acceptedDevices] List with names of accepted devices
 * @member {array} [rejectedDevices] List with names and descriptions of
 * rejected devices
 */
export interface TestCloudStartTestRunResult {
  acceptedDevices?: string[];
  rejectedDevices?: string[];
}

/**
 * @class
 * Initializes a new instance of the TestReportStats class.
 * @constructor
 * @member {number} [os]
 * @member {number} [devices]
 * @member {number} [filesize]
 * @member {number} [totalDeviceMinutes]
 * @member {number} [devicesNotRunned]
 * @member {number} [failed]
 * @member {number} [skipped]
 * @member {number} [passed]
 * @member {number} [total]
 * @member {number} [devicesFinished]
 * @member {number} [devicesFailed]
 * @member {number} [devicesSkipped]
 * @member {number} [stepCount]
 */
export interface TestReportStats {
  os?: number;
  devices?: number;
  filesize?: number;
  totalDeviceMinutes?: number;
  devicesNotRunned?: number;
  failed?: number;
  skipped?: number;
  passed?: number;
  total?: number;
  devicesFinished?: number;
  devicesFailed?: number;
  devicesSkipped?: number;
  stepCount?: number;
}

/**
 * @class
 * Initializes a new instance of the TestReportFeaturesItemTestsItemRunsItemStepsItemStepExecutionsItem class.
 * @constructor
 * @member {string} [deviceSnapshotId]
 * @member {string} [status]
 * @member {number} [timestamp]
 */
export interface TestReportFeaturesItemTestsItemRunsItemStepsItemStepExecutionsItem {
  deviceSnapshotId?: string;
  status?: string;
  timestamp?: number;
}

/**
 * @class
 * Initializes a new instance of the TestReportFeaturesItemTestsItemRunsItemStepsItem class.
 * @constructor
 * @member {string} [stepName]
 * @member {string} [id]
 * @member {array} [stepExecutions]
 * @member {number} [failed]
 * @member {number} [skipped]
 * @member {string} [stepReportUrl]
 */
export interface TestReportFeaturesItemTestsItemRunsItemStepsItem {
  stepName?: string;
  id?: string;
  stepExecutions?: TestReportFeaturesItemTestsItemRunsItemStepsItemStepExecutionsItem[];
  failed?: number;
  skipped?: number;
  stepReportUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the TestReportFeaturesItemTestsItemRunsItem class.
 * @constructor
 * @member {number} [number]
 * @member {array} [steps]
 * @member {number} [failed]
 * @member {number} [skipped]
 * @member {string} [reportUrl]
 * @member {string} [id]
 */
export interface TestReportFeaturesItemTestsItemRunsItem {
  number?: number;
  steps?: TestReportFeaturesItemTestsItemRunsItemStepsItem[];
  failed?: number;
  skipped?: number;
  reportUrl?: string;
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the TestReportFeaturesItemTestsItem class.
 * @constructor
 * @member {string} [testName]
 * @member {array} [runs]
 * @member {number} [peakMemory]
 * @member {number} [peakDuration]
 */
export interface TestReportFeaturesItemTestsItem {
  testName?: string;
  runs?: TestReportFeaturesItemTestsItemRunsItem[];
  peakMemory?: number;
  peakDuration?: number;
}

/**
 * @class
 * Initializes a new instance of the TestReportFeaturesItem class.
 * @constructor
 * @member {string} [name]
 * @member {array} [tests]
 * @member {number} [failed]
 * @member {number} [skipped]
 * @member {number} [peakMemory]
 * @member {number} [peakDuration]
 */
export interface TestReportFeaturesItem {
  name?: string;
  tests?: TestReportFeaturesItemTestsItem[];
  failed?: number;
  skipped?: number;
  peakMemory?: number;
  peakDuration?: number;
}

/**
 * @class
 * Initializes a new instance of the TestReportDeviceLogsItem class.
 * @constructor
 * @member {string} [deviceSnapshotId]
 * @member {string} [deviceLog]
 * @member {string} [testLog]
 * @member {string} [appiumLog]
 */
export interface TestReportDeviceLogsItem {
  deviceSnapshotId?: string;
  deviceLog?: string;
  testLog?: string;
  appiumLog?: string;
}

/**
 * @class
 * Initializes a new instance of the TestReport class.
 * @constructor
 * @member {string} appUploadId
 * @member {string} date
 * @member {string} testType
 * @member {string} platform
 * @member {object} stats
 * @member {number} [stats.os]
 * @member {number} [stats.devices]
 * @member {number} [stats.filesize]
 * @member {number} [stats.totalDeviceMinutes]
 * @member {number} [stats.devicesNotRunned]
 * @member {number} [stats.failed]
 * @member {number} [stats.skipped]
 * @member {number} [stats.passed]
 * @member {number} [stats.total]
 * @member {number} [stats.devicesFinished]
 * @member {number} [stats.devicesFailed]
 * @member {number} [stats.devicesSkipped]
 * @member {number} [stats.stepCount]
 * @member {string} id
 * @member {number} schemaVersion
 * @member {number} revision
 * @member {array} features
 * @member {array} finishedDeviceSnapshots
 * @member {array} deviceLogs
 * @member {string} dateFinished
 * @member {string} [errorMessage]
 */
export interface TestReport {
  appUploadId: string;
  date: string;
  testType: string;
  platform: string;
  stats: TestReportStats;
  id: string;
  schemaVersion: number;
  revision: number;
  features: TestReportFeaturesItem[];
  finishedDeviceSnapshots: string[];
  deviceLogs: TestReportDeviceLogsItem[];
  dateFinished: string;
  errorMessage?: string;
}

/**
 * @class
 * Initializes a new instance of the TestRunStatistics class.
 * @constructor
 * @summary Test Run Statistics
 *
 * Summary single test run on Xamarin Test Cloud
 *
 * @member {number} [devices] Number of devices running the test
 * @member {number} [devicesFinished] Number of finished devices
 * @member {number} [devicesFailed] Number of failed devices
 * @member {number} [total] Number of tests in total
 * @member {number} [passed] Number of passed tests
 * @member {number} [failed] Number of failed tests
 * @member {number} [skipped] Number of skipped tests
 * @member {number} [peakMemory] The max amount of MB used during the test run
 * @member {number} [totalDeviceMinutes] The number of minutes of device time
 * the test has been runnign
 */
export interface TestRunStatistics {
  devices?: number;
  devicesFinished?: number;
  devicesFailed?: number;
  total?: number;
  passed?: number;
  failed?: number;
  skipped?: number;
  peakMemory?: number;
  totalDeviceMinutes?: number;
}

/**
 * @class
 * Initializes a new instance of the TestRun class.
 * @constructor
 * @summary Test Run
 *
 * Summary single test run on Xamarin Test Cloud
 *
 * @member {uuid} [id] The unique id of the test upload
 * @member {string} [date] The date and time the test was uploaded
 * @member {string} [appVersion] The compiled version of the app binary
 * @member {string} [testSeries] The name of the test series with which this
 * test upload is associated
 * @member {string} [platform] The device platform targeted by the test.
 * Possible values are 'ios' or 'android'
 * @member {string} [runStatus] The current status of the test run, in relation
 * to the various phases
 * @member {string} [resultStatus] The passed/failed state
 * @member {string} [state] Deprecated. Use runStatus instead.
 * @member {string} [status] Deprecated. Use resultStatus instead.
 * @member {string} [description] Human readable explanation of the current
 * test status
 * @member {object} [stats]
 * @member {number} [stats.devices] Number of devices running the test
 * @member {number} [stats.devicesFinished] Number of finished devices
 * @member {number} [stats.devicesFailed] Number of failed devices
 * @member {number} [stats.total] Number of tests in total
 * @member {number} [stats.passed] Number of passed tests
 * @member {number} [stats.failed] Number of failed tests
 * @member {number} [stats.skipped] Number of skipped tests
 * @member {number} [stats.peakMemory] The max amount of MB used during the
 * test run
 * @member {number} [stats.totalDeviceMinutes] The number of minutes of device
 * time the test has been runnign
 * @member {string} [testType] The name of the test framework used to run this
 * test
 * @member {string} [uploadedBy] The name of the user who uploaded the test
 */
export interface TestRun {
  id?: string;
  date?: string;
  appVersion?: string;
  testSeries?: string;
  platform?: string;
  runStatus?: string;
  resultStatus?: string;
  state?: string;
  status?: string;
  description?: string;
  stats?: TestRunStatistics;
  testType?: string;
  uploadedBy?: string;
}

/**
 * @class
 * Initializes a new instance of the TestRunState class.
 * @constructor
 * @summary Test Run State
 *
 * Current status of a test run
 *
 * @member {array} [message] Multi-line message that describes the status
 * @member {number} [waitTime] Time (in seconds) that the client should wait
 * for before checking the status again
 * @member {number} [exitCode] The exit code that the client should use when
 * exiting. Used for indicating status to the caller of the client.
 * 0: test run completes with no failing tests
 * 1: test run completes with at least one failing test
 * 2: test run failed to complete. Status for test run is unknown
 */
export interface TestRunState {
  message?: string[];
  waitTime?: number;
  exitCode?: number;
}

/**
 * @class
 * Initializes a new instance of the TestRunSummary class.
 * @constructor
 * @summary Test Run Summary
 *
 * Most important information about a test run.
 *
 * @member {string} [date] Date of the test run.
 * @member {string} [statusDescription] Human-readable status of the test run.
 * @member {number} [failed] Number of failed tests
 * @member {number} [passed] Number of passed tests
 * @member {boolean} [completed] Tells whether the test run has completed
 */
export interface TestRunSummary {
  date?: string;
  statusDescription?: string;
  failed?: number;
  passed?: number;
  completed?: boolean;
}

/**
 * @class
 * Initializes a new instance of the TestSeries class.
 * @constructor
 * @summary Test Series
 *
 * Summary of a single test series
 *
 * @member {string} slug Unique, human-readable identifier of the test series
 * @member {string} name Name of the test series
 * @member {string} [mostRecentActivity] Date of the latest test run that used
 * this test series
 * @member {array} [testRuns] Most recent test runs
 */
export interface TestSeries {
  slug: string;
  name: string;
  mostRecentActivity?: string;
  testRuns?: TestRunSummary[];
}

/**
 * @class
 * Initializes a new instance of the TestSeriesName class.
 * @constructor
 * @summary Name of the test series
 *
 * @member {string} name Name of the new test series
 */
export interface TestSeriesName {
  name: string;
}
